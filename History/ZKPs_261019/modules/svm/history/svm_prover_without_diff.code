// component1[i] = (feature[i] * weight[i]) / std[i]
// component2[i] = feature[i] / std[i]
// With sum_component1 and sum_component2 verified and provided to the server, the server can construct the svm result confidently

def main( \
    private field[32] features, \
    field[32] scaler_stds, \
    field[32] feature_weights, \
    private field[32] component1, \
    private field[32] component2, \
    field sum_component1, \
    field sum_component2 \
) -> (field):
        
    field check = 0
    field sum1 = 0
    field sum2 = 0

    for field i in 0..32 do
        check = if (component1[i] * scaler_stds[i] <= features[i] * feature_weights[i]) && ((component1[i] + 1) * scaler_stds[i] > features[i] * feature_weights[i]) then check else check + 1 fi
        check = if (component2[i] * scaler_stds[i] <= features[i]) && ((component2[i] + 1) * scaler_stds[i] > features[i]) then check else check + 1 fi
        sum1 = sum1 + component1[i]
        sum2 = sum2 + component2[i]
    endfor

    check == 0
    sum1 == sum_component1
    sum2 == sum_component2

    return 11